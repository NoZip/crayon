%{
#include <string>

#include "point.hpp"
#include "path.hpp"
#include "command.hpp"

void yyerror(const char* error);
int yylex();
void clear_stack();
%}


// Types definitions

%union {
	float real;
    char* string;
	Point* point;
	Path* path;
    Command* command;
}

%token <real> REAL
%token <string> NAME

%type <real> expression

%type <command> command
%type <point> point
%type <path> path


// Operators and separators

%token RPAR LPAR
%token PLUS MINUS MUL DIV
%token COMMA DOUBLE_POINT
%token PATH_SEPARATOR CYCLE
%token DRAW_COMMAND FILL_COMMAND
%token NEWLINE

%left PLUS MINUS
%left MUL DIV
%left UNARY

%%

/*
SERVICE MESSAGE:
C'est juste un premier jet, les grammaire ne sont pas forcement bonnes.
Surtout celle des chemins.
 */

flow : command NEWLINE flow {$1->execute(); delete $1;}
| command
;

// Computes mathematical expressions
expression : expression PLUS expression {$$ = $1 + $3;}
| expression MINUS expression {$$ = $1 - $3;}
| MINUS expression %prec UNARY {$$ = -$2;}
| expression MUL expression {$$ = $1 * $3;}
| expression DIV expression {$$ = $1 / $3;}
| REAL {$$ = $1;}
;

point : RPAR expression COMMA expression LPAR {Point *p = new Point($2, $4); $$ = p;}
//| RPAR expression DOUBLE_POINT expression LPAR {/*polar coordinates*/}
;

path : path PATH_SEPARATOR point {$1->append(*$3); $$ = $1;}
| path PATH_SEPARATOR PLUS point {$1->append_relative(*$4); $$ = $1;}
| path PATH_SEPARATOR CYCLE {$1->append_cycle(); $$ = $1;}
| point PATH_SEPARATOR point {Path *c = new Path(); c->append(*$1); c->append(*$3); $$ = c;}
| point PATH_SEPARATOR PLUS point {Path *c = new Path(); c->append(*$1); c->append_relative(*$4); $$ = c;}
| point PATH_SEPARATOR CYCLE {Path *c = new Path(); c->append(*$1); c->append_cycle(); $$ = c;}
;

command : DRAW_COMMAND path {
	Command *c = new Command(DRAW, *$2);
	$$ = c;
}
| FILL_COMMAND path {
	Command *c = new Command(FILL, *$2);
	$$ = c;
}
;

/*
variable: NAME EQ point
| NAME EQ path
| NAME EQ image
;
 */

/*
image: IMG_START flow IMG_END
;
 */

/*
rotation : ROTATION RPAR REAL COMMA REAL COMMA REAL LPAR
 */