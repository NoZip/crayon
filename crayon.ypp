%{
#include "point.hpp"
#include "path.hpp"
#include "command.hpp"
%}


// Types definitions

%union {
	float real;
	Point point_t;
	Path path_t;
    Command command_t;
}

%token <real> REAL
%type <real> expression

// %type <command_t> command

/*
%type <point_t> point
%type <path_t> path
*/


// Operators and separators

%token RPAR LPAR
%token PLUS MINUS MUL DIV
%token COMMA DOUBLE_POINT
%token PATH_SEPARATOR CYCLE
%token DRAW_COMMAND FILL_COMMAND
%token NEWLINE

%left PLUS MINUS
%left MUL DIV
%left UNARY

%%

/*
SERVICE MESSAGE:
C'est juste un premier jet, les grammaire ne sont pas forcement bonnes.
Surtout celle des chemins.
 */

flow : flow NEWLINE instruction
| instruction
;

instruction : command
;

// Computes mathematical expressions
expression : expression PLUS expression {$$ = $1 + $3;}
| expression MINUS expression {$$ = $1 - $3;}
| MINUS expression %prec UNARY {$$ = -$2;}
| expression MUL expression {$$ = $1 * $3;}
| expression DIV expression {$$ = $1 / $3;}
| REAL {$$ = $1;}
;

point : RPAR expression COMMA expression LPAR {/*cartesians coordinates*/}
| RPAR expression DOUBLE_POINT expression LPAR {/*polar coordinates*/}
;

path : path PATH_SEPARATOR point {/*add a point*/}
| path PATH_SEPARATOR PLUS point {/*add a relative point*/}
| path PATH_SEPARATOR CYCLE {/*add a cycle*/}
| point PATH_SEPARATOR point
| point PATH_SEPARATOR PLUS point
| point PATH_SEPARATOR CYCLE
;

command : DRAW_COMMAND path {
	// Command c(DRAW, $2);
	// $$ = c;
}
| FILL_COMMAND path {
	// Command c(FILL, $2);
	// $$ = c;
}
;

/*
variable: NAME EQ point
| NAME EQ path
| NAME EQ image
;
 */

/*
image: IMG_START flow IMG_END
;
 */

/*
rotation : ROTATION RPAR REAL COMMA REAL COMMA REAL LPAR
 */